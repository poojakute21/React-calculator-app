{"version":3,"sources":["components/Button.js","components/Input.js","components/ClearButton.js","App.js","reportWebVitals.js","index.js"],"names":["Button","props","className","val","children","isNaN","onClick","handleClick","onKeyUp","Input","input","ClearButton","handleClear","App","addToInput","setState","state","handleEqual","math","handleMath","handlePercentage","this","React","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0VAmBeA,G,YAbA,SAAAC,GACZ,OAAS,qBACRC,UAAS,0BALMC,EAMFF,EAAMG,SALXC,MAAMF,IAAgB,MAARA,GAAwB,QAARA,GAA0B,MAARA,GAAuB,KAARA,EAKjC,WAAP,OAE/BG,QAAS,kBAAML,EAAMM,YAAYN,EAAMG,WACvCI,QAAS,kBAAMP,EAAMM,YAAYN,EAAMG,WAL/B,SAOHH,EAAMG,WAXI,IAAAD,ICCNM,G,MAAQ,SAAAR,GAAK,OAAI,qBAAKC,UAAU,QAAf,SAAwBD,EAAMS,UCD/CC,G,MAAc,SAACV,GACxB,OACA,qBAAKC,UAAU,iBAAiBI,QAASL,EAAMW,YAA/C,SACKX,EAAMG,a,QCqEAS,E,kDAlEb,WAAYZ,GAAQ,IAAD,8BACjB,cAAMA,IAMRa,WAAa,SAAAX,GACX,EAAKY,SAAS,CAACL,MAAO,EAAKM,MAAMN,MAAQP,KARxB,EAUnBc,YAAc,WACZ,EAAKF,SAAS,CAACL,MAAOQ,IAAc,EAAKF,MAAMN,UAX9B,EAcnBS,WAAa,WACX,EAAKJ,SAAS,CAACL,MAAOQ,KAAkC,EAApB,EAAKF,MAAMN,UAf9B,EAkBnBU,iBAAmB,WACjB,EAAKL,SAAS,CAACL,MAAOQ,IAAc,EAAKF,MAAMN,MAAM,QAhBrD,EAAKM,MAAQ,CACVN,MAAO,IAJO,E,qDAsBT,IAAD,OACP,OACE,qBAAKR,UAAU,MAAf,SACI,sBAAKA,UAAU,eAAf,UACE,cAAC,EAAD,CAAOQ,MAAOW,KAAKL,MAAMN,QACzB,sBAAKR,UAAU,MAAf,UACI,cAAC,EAAD,CAAaU,YAAa,kBAAM,EAAKG,SAAS,CAACL,MAAO,MAAtD,gBACA,cAAC,EAAD,CAAQH,YAAe,kBAAM,EAAKY,cAAlC,iBACA,cAAC,EAAD,CAAQZ,YAAe,kBAAM,EAAKa,oBAAlC,eACA,cAAC,EAAD,CAAQb,YAAec,KAAKP,WAA5B,kBAEJ,sBAAKZ,UAAU,MAAf,UACI,cAAC,EAAD,CAAQK,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,kBAEJ,sBAAKZ,UAAU,MAAf,UACI,cAAC,EAAD,CAAQK,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,kBAEJ,sBAAKZ,UAAU,MAAf,UACI,cAAC,EAAD,CAAQK,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,kBAEJ,sBAAKZ,UAAU,MAAf,UACI,cAAC,EAAD,CAAQK,YAAec,KAAKP,WAA5B,eACA,cAAC,EAAD,CAAQP,YAAec,KAAKP,WAA5B,gBACA,cAAC,EAAD,CAAQP,YAAcc,KAAKP,WAA3B,eACA,cAAC,EAAD,CAAQP,YAAc,kBAAM,EAAKU,eAAjC,kBAEJ,qBAAKf,UAAU,iB,GA1DToB,IAAMC,WCITC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.166b75d4.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Button.css';\r\n\r\nconst isOperator = val => {\r\n    return !isNaN(val) || val === \".\" ||  val === \"+/-\"  || val === \"%\" || val === \"\";\r\n}\r\nconst Button = props => {\r\n   return ( <div\r\n    className={`button-wrapper ${\r\n      isOperator(props.children) ? null : \"operator\"\r\n    }`}\r\n    onClick={() => props.handleClick(props.children)}\r\n    onKeyUp={() => props.handleClick(props.children)}\r\n     >\r\n        {props.children}\r\n    </div>\r\n   );\r\n}\r\n\r\nexport default Button;","import React from 'react';\r\nimport './Input.css';\r\n\r\n\r\nexport const Input = props => <div className=\"input\">{props.input}</div>;","import React from 'react';\r\nimport './ClearButton.css';\r\n\r\nexport const ClearButton = (props) =>{\r\n    return(\r\n    <div className=\"button-wrapper\" onClick={props.handleClear}>\r\n        {props.children}\r\n    </div>\r\n    );\r\n} ","import React, {Component} from 'react';\nimport './App.css';\nimport Button  from './components/Button';\nimport { Input } from './components/Input';\nimport { ClearButton } from './components/ClearButton';\nimport * as math from 'mathjs';\n\n\nclass App extends React.Component{\n  constructor(props) {\n    super(props)\n  \n    this.state = {\n       input :\"\"\n    }\n  }\n  addToInput = val =>{\n    this.setState({input: this.state.input + val});\n  }\n  handleEqual = () =>{\n    this.setState({input: math.evaluate(this.state.input)});\n  }\n \n  handleMath = () =>{\n    this.setState({input: math.evaluate(this.state.input * -1)});\n  }\n \n  handlePercentage = () =>{\n    this.setState({input: math.evaluate(this.state.input/100)});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <div className=\"calc-wrapper\">\n            <Input input={this.state.input}></Input>\n            <div className=\"row\">\n                <ClearButton handleClear={() => this.setState({input: \"\"})}>AC</ClearButton>\n                <Button handleClick = {() => this.handleMath()}>+/-</Button>\n                <Button handleClick = {() => this.handlePercentage()}>%</Button>\n                <Button handleClick = {this.addToInput}>/</Button>\n            </div>\n            <div className=\"row\">\n                <Button handleClick = {this.addToInput}>7</Button>\n                <Button handleClick = {this.addToInput}>8</Button>\n                <Button handleClick = {this.addToInput}>9</Button>\n                <Button handleClick = {this.addToInput}>*</Button>\n            </div>\n            <div className=\"row\">\n                <Button handleClick = {this.addToInput}>4</Button>\n                <Button handleClick = {this.addToInput}>5</Button>\n                <Button handleClick = {this.addToInput}>6</Button>\n                <Button handleClick = {this.addToInput}>-</Button>\n            </div>\n            <div className=\"row\">\n                <Button handleClick = {this.addToInput}>1</Button>\n                <Button handleClick = {this.addToInput}>2</Button>\n                <Button handleClick = {this.addToInput}>3</Button>\n                <Button handleClick = {this.addToInput}>+</Button>\n            </div>\n            <div className=\"row\">\n                <Button handleClick = {this.addToInput}>0</Button>\n                <Button handleClick = {this.addToInput}>00</Button>\n                <Button handleClick ={this.addToInput} >.</Button>\n                <Button handleClick ={() => this.handleEqual()}>=</Button>\n            </div>\n            <div className=\"row\">\n             \n            </div>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}